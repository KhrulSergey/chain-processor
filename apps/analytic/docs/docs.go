// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activate": {
            "post": {
                "description": "activates user by setting up new login and password",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Initialize user's login and password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "code which is sent to user's email during registration (embedded in link)",
                        "name": "activation_code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "description": "user login",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "password",
                        "description": "user password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "user credentials are updeted"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "unable to authenticate with activation  code"
                    },
                    "409": {
                        "description": "login is taken already"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/authorize": {
            "get": {
                "description": "redirects user to login page",
                "tags": [
                    "auth"
                ],
                "summary": "Redirect to login",
                "parameters": [
                    {
                        "enum": [
                            "code"
                        ],
                        "type": "string",
                        "description": "authentication response type",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "id of the client (application)",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uri",
                        "description": "url to redirect after successful authentication",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "a list of scopes (open_id,profile,phone,email) for ID token separated by ' '",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "redirects to login page"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "authenticates user using OpenId Listen",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Authenticates user",
                "parameters": [
                    {
                        "enum": [
                            "code"
                        ],
                        "type": "string",
                        "description": "authentication response type",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "id of the client (application)",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uri",
                        "description": "url to redirect after successful authentication",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "a list of scopes (open_id,profile,phone,email) for ID token separated by ' '",
                        "name": "scope",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "email",
                        "description": "user login",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "password",
                        "description": "user password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "redirects to 'redirect_uri' with authentication credentials in query based on response type"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/system/version": {
            "get": {
                "description": "Returns the current version of the application and the current timestamp",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get application version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.VersionResponseDTO"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/token": {
            "post": {
                "description": "generates token for user",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Token generation",
                "parameters": [
                    {
                        "enum": [
                            "authorization_code"
                        ],
                        "type": "string",
                        "description": "authentication type",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "id of the client (application)",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "password",
                        "description": "secret of the client (application)",
                        "name": "client_secret",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "authentication code",
                        "name": "code",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uri",
                        "description": "redirect uri which was used for authentication",
                        "name": "redirect_uri",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.TokenResponseDTO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.TokenResponseDTO": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "id_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "dto.VersionResponseDTO": {
            "type": "object",
            "properties": {
                "app_version": {
                    "type": "string"
                },
                "current_timestamp": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
